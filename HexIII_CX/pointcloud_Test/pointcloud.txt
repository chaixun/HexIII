#include <iostream>


using namespace std;

class SimpleOpenNIViewer
{
public:
    SimpleOpenNIViewer () : viewer ("PCL OpenNI Viewer")
    {
        frames_saved = 0;
        save_one = false;
    }
    void cloud_cb_ (const pcl::PointCloud<pcl::PointXYZ>::ConstPtr &cloud)
    {
        if (!viewer.wasStopped())
        {

            //Remove NAN
            std::vector<int> mapping;
            pcl::PointCloud<pcl::PointXYZ>::Ptr newcloud(new pcl::PointCloud<pcl::PointXYZ>);
            pcl::removeNaNFromPointCloud(*cloud,*newcloud,mapping);

            //Filtering VoxelGrid
            pcl::PointCloud<pcl::PointXYZ>::Ptr filtercloudgrid(new pcl::PointCloud<pcl::PointXYZ>);
            pcl::VoxelGrid<pcl::PointXYZ> filtergrid;
            filtergrid.setInputCloud(newcloud);
            filtergrid.setLeafSize(0.005f,0.005f,0.005f);
            filtergrid.filter(*filtercloudgrid);

            //Transformation
            pcl::PointCloud<pcl::PointXYZ>::Ptr transformed(new pcl::PointCloud<pcl::PointXYZ>);
            viewer.showCloud (filtercloudgrid);
            Eigen::Matrix4f transformation = Eigen::Matrix4f::Identity();

            pcl::transformPointCloud(*filtercloudgrid,*transformed,transformation);


            //Filtering Range
            pcl::PointCloud<pcl::PointXYZ>::Ptr filtertransformed(new pcl::PointCloud<pcl::PointXYZ>);
            pcl::ConditionAnd<pcl::PointXYZ>::Ptr condition(new pcl::ConditionAnd<pcl::PointXYZ>);
            condition->addComparison(pcl::FieldComparison<pcl::PointXYZ>::ConstPtr
                                     (new pcl::FieldComparison<pcl::PointXYZ>("z", pcl::ComparisonOps::GT, 0.0)));
            condition->addComparison(pcl::FieldComparison<pcl::PointXYZ>::ConstPtr
                                     (new pcl::FieldComparison<pcl::PointXYZ>("z", pcl::ComparisonOps::LT, 3.0)));
            condition->addComparison(pcl::FieldComparison<pcl::PointXYZ>::ConstPtr
                                     (new pcl::FieldComparison<pcl::PointXYZ>("x", pcl::ComparisonOps::GT, -1.5)));
            condition->addComparison(pcl::FieldComparison<pcl::PointXYZ>::ConstPtr
                                     (new pcl::FieldComparison<pcl::PointXYZ>("x", pcl::ComparisonOps::LT, 1.5)));

            pcl::ConditionalRemoval<pcl::PointXYZ> filterrange;
            filterrange.setCondition(condition);
            filterrange.setInputCloud(transformed);
            filterrange.setKeepOrganized(false);
            filterrange.filter(*filtertransformed);

            //Mapping GridMap
            Eigen::MatrixXf GridMap = Eigen::MatrixXf::Zero(120,120);
            Eigen::MatrixXf GridNum = Eigen::MatrixXf::Zero(120,120);
            for (size_t i = 0;i < filtertransformed->points.size(); ++i)
            {
                int m, n;
                n = floor(filtertransformed->points[i].x/0.025) + 60;
                m = floor(filtertransformed->points[i].z/0.025);

                //Mean
                GridMap(m,n) = (GridMap(m,n)*GridNum(m,n) + filtertransformed->points[i].y)/(GridNum(m,n) + 1);
                GridNum(m,n) = GridNum(m,n) + 1;


                //Max
                /*
                if (GridMap(m,n) < filtertransformed->points[i].y)
                {
                    GridMap(m,n) = filtertransformed->points[i].y;
                }
                */

            }

            std::ofstream Gridmapfile("GridMap.txt");
            if (Gridmapfile.is_open())
            {
                Gridmapfile<<GridMap<<endl;
            }


            if(save_one)
            {

                save_one = false;
                cout<<filtertransformed->points.size()<<endl;
                //std::stringstream out;
                //out<<frames_saved;
                //std::string newname = "newcloud" + out.str() + ".pcd";
                //std::string transformedname = "transformedcloud" + out.str() + ".pcd";


                //pcl::io::savePCDFileASCII(newname,newcloud);
                //pcl::io::savePCDFileASCII(transformedname,filtertransformed);
            }

        }
    }

    void run ()
    {
        pcl::Grabber* interface = new pcl::OpenNIGrabber();

        boost::function<void (const pcl::PointCloud<pcl::PointXYZ>::ConstPtr&)> f =
                boost::bind (&SimpleOpenNIViewer::cloud_cb_, this, _1);

        interface->registerCallback (f);

        interface->start ();

        char c;

        while (!viewer.wasStopped())
        {
            c = getchar();
            if( c == 's')
            {
                cout<<"Saving frame: "<<frames_saved<<endl;
                frames_saved++;
                save_one = true;

                //        boost::this_thread::sleep (boost::posix_time::seconds (1));
            }
        }

        interface->stop ();
    }

    pcl::visualization::CloudViewer viewer;
private:
    int frames_saved;
    bool save_one;
};

//int main ()
//{
 //   SimpleOpenNIViewer v;
 //   v.run ();
  //  cout << "Hello World!" << endl;
   // return 0;
//}

